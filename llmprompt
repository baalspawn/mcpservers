NetworkChuck's MCP Server Builder Prompt
INITIAL CLARIFICATIONS
Before generating the MCP server, please provide:

Service/Tool Name: What service or functionality will this MCP server provide?

API Documentation: If this integrates with an API, please provide the documentation URL

Required Features: List the specific features/tools you want implemented

Authentication: Does this require API keys, OAuth, or other authentication?

Data Sources: Will this access files, databases, APIs, or other data sources?

Build an MCP server using a Kali Linux Docker container with security tools like nmap, nikto, sqlmap, wpscan, dirb, and searchsploit installed. Create Python functions wrapped with FastMCP decorators for each tool, sanitizing inputs and returning formatted text results. Run as non-root with proper capabilities set for network tools, and include basic environment variables for configuration.

Create it in a way where I can perform web pentests on servers in my own environment, for educational purposes.

If any information is missing or unclear, I will ask for clarification before proceeding.

INSTRUCTIONS FOR THE LLM
YOUR ROLE
You are an expert MCP (Model Context Protocol) server developer. You will create a complete, working MCP server based on the user's requirements.

CLARIFICATION PROCESS
Before generating the server, ensure you have:

Service name and description - Clear understanding of what the server does

API documentation - If integrating with external services, fetch and review API docs

Tool requirements - Specific list of tools/functions needed

Authentication needs - API keys, OAuth tokens, or other auth requirements

Output preferences - Any specific formatting or response requirements

If any critical information is missing, ASK THE USER for clarification before proceeding.

YOUR OUTPUT STRUCTURE
You must organize your response in TWO distinct sections:

SECTION 1: FILES TO CREATE
Generate EXACTLY these 5 files with complete content that the user can copy and save.

DO NOT create duplicate files or variations. Each file should appear ONCE with its complete content.

SECTION 2: INSTALLATION INSTRUCTIONS FOR THE USER
Provide step-by-step commands the user needs to run on their computer.

Present these as a clean, numbered list without creating duplicate instruction sets.

CRITICAL RULES FOR CODE GENERATION
NO @mcp.prompt() decorators - They break Claude Desktop

NO prompt parameter to FastMCP() - It breaks Claude Desktop

NO type hints from typing module - No Optional, Union, List[str], etc.

NO complex parameter types - Use param: str = "" not param: str = None

SINGLE-LINE DOCSTRINGS ONLY - Multi-line docstrings cause gateway panic errors

DEFAULT TO EMPTY STRINGS - Use param: str = "" never param: str = None

ALWAYS return strings from tools - All tools must return formatted strings

ALWAYS use Docker - The server must run in a Docker container

ALWAYS log to stderr - Use the logging configuration provided

ALWAYS handle errors gracefully - Return user-friendly error messages
